"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[827],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?i.createElement(v,o(o({ref:n},p),{},{components:t})):i.createElement(v,o({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2175:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],c={sidebar_position:2},l="Usage",s={unversionedId:"usage",id:"usage",title:"Usage",description:"Defining an injectable",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/docs/usage",editUrl:"https://github.com/burketyler/ts-injection/docs/usage.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Setup",permalink:"/docs/setup"},next:{title:"API Reference",permalink:"/docs/api-reference"}},p=[{value:"Defining an injectable",id:"defining-an-injectable",children:[{value:"Classes",id:"classes",children:[],level:3},{value:"Named injectables",id:"named-injectables",children:[],level:3}],level:2},{value:"Injecting dependencies",id:"injecting-dependencies",children:[{value:"Constructor injection",id:"constructor-injection",children:[],level:3},{value:"Field injection",id:"field-injection",children:[],level:3}],level:2},{value:"Injection entry point",id:"injection-entry-point",children:[],level:2},{value:"Environment variables",id:"environment-variables",children:[],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usage"},"Usage"),(0,a.kt)("h2",{id:"defining-an-injectable"},"Defining an injectable"),(0,a.kt)("h3",{id:"classes"},"Classes"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable")," annotation to let the framework know that you intend for this class to be handled by the injection\ncontext."),(0,a.kt)("p",null,"This means that:"),(0,a.kt)("p",null,"1) it can be injected into other classes.\n2) any injectable classes provided as constructor arguments are automatically resolved."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'@Injectable\nexport class MyService {\n    constructor() {\n    }\n\n    public test() {\n        console.log("Injection context test from MyService.");\n    }\n}\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Because it's managed by the injection context, a class marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable"),"\ncan ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"only"))," define constructor arguments that are injectables. Never construct\n",(0,a.kt)("inlineCode",{parentName:"p"},"App")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"new"),", always use ",(0,a.kt)("inlineCode",{parentName:"p"},"resolve()"),"."))),(0,a.kt)("h3",{id:"named-injectables"},"Named injectables"),(0,a.kt)("p",null,"You can make any other variable injectable using the ",(0,a.kt)("inlineCode",{parentName:"p"},"register()"),"method. You will need to specify a unique token name to\nidentify the value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface ConfigObject {\n    config1: string;\n}\n\nconst myObject = {\n    config1: "123"\n};\n\nregister<ConfigObject>(myObject, "TOKEN_CONFIG");\n')),(0,a.kt)("h2",{id:"injecting-dependencies"},"Injecting dependencies"),(0,a.kt)("h3",{id:"constructor-injection"},"Constructor injection"),(0,a.kt)("p",null,"Any constructor arguments provided to an ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable")," class will be automatically resolved from the injection context.\nYou can also specify a named injectable using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Autowire")," annotation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'@Injectable\nexport class App {\n    constructor(private service: MyService, @Autowire("TOKEN_CONFIG") private config: ConfigObject) {\n        this.service.test();\n        // Outputs: Injection context test from MyService.\n        console.log(this.config);\n        // Output: { config1: "123" }\n    }\n}\n')),(0,a.kt)("h3",{id:"field-injection"},"Field injection"),(0,a.kt)("p",null,"You can inject a named injectable or an injectable class into a class member by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Autowire"),"\nannotation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'@Injectable\nexport class App {\n    @Autowire(MyService)\n    private service: MyService;\n\n    @Autowire("TOKEN_CONFIG")\n    private config: ConfigObject;\n\n    constructor() {\n       this.service.test();\n       // Outputs: Injection context test from MyService.\n        console.log(this.config);\n        // Output: { config1: "123" }\n    }\n}\n')),(0,a.kt)("h2",{id:"injection-entry-point"},"Injection entry point"),(0,a.kt)("p",null,"The framework needs to know where your application begins. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"resolve()")," method to get an instance\nof your entry point class from the injection context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\n@Injectable\nexport class App {\n    constructor(private service: MyService) {\n    }\n}\n\nconst app = resolve<App>(App);\n")),(0,a.kt)("h2",{id:"environment-variables"},"Environment variables"),(0,a.kt)("p",null,"You can inject environment variables into class members using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Env")," annotation.\nThe framework will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"class member")," to infer how to parse the value.\nSupported types are: ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"number"),".\nYou can also optionally pass a mapping function that will take in the string value and\nreturn the mapped value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'process.env.CFG_STR = "test";\nprocess.env.CFG_NUM = "123";\nprocess.env.CFG_BOOL = "true";\nprocess.env.CFG_OBJ = "{\\"myObj\\": \\"hello\\"}";\n\ntype MyObj = { myObj: string };\n\nfunction mapObj(val: string): MyObj {\n    const obj = JSON.parse(val);\n    obj.newVal = 123;\n    return obj;\n}\n\nexport class App {\n    @Env("CFG_STR")\n    private myString: string;\n    @Env("CFG_NUM")\n    private myNumber: number;\n    @Env("CFG_BOOL")\n    private myBool: boolean;\n    @Env("CFG_OBJ")\n    private myObj: MyObj;\n    @Env<MyObj>("CFG_OBJ", mapObj)\n    private myMappedObj: MyObj;\n    \n    constructor() {\n        console.log(this.myString);\n        // "test"\n        console.log(this.myNumber);\n        // 123\n        console.log(this.myBool);\n        // true\n        console.log(this.myObj);\n        // {\n        //  myObj: "hello"\n        // }\n        console.log(this.myMappedObj);\n        // {\n        //  myObj: "hello",\n        //  newVal: 123\n        // }\n    }\n}\n')))}m.isMDXComponent=!0}}]);