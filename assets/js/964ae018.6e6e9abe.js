"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[491],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1082:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={sidebar_position:3},s="API Reference",c={unversionedId:"api-reference",id:"api-reference",title:"API Reference",description:"Annotations",source:"@site/docs/api-reference.md",sourceDirName:".",slug:"/api-reference",permalink:"/ts-injection/docs/api-reference",editUrl:"https://github.com/burketyler/ts-injection/docs/api-reference.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Usage",permalink:"/ts-injection/docs/usage"},next:{title:"Caveats",permalink:"/ts-injection/docs/caveats"}},p=[{value:"Annotations",id:"annotations",children:[{value:"@Injectable",id:"injectable",children:[],level:3},{value:"@Autowire",id:"autowire",children:[],level:3},{value:"@Env",id:"env",children:[{value:"Options",id:"options",children:[],level:5}],level:3}],level:2},{value:"Functions",id:"functions",children:[{value:"resolve",id:"resolve",children:[],level:3},{value:"register",id:"register",children:[],level:3}],level:2},{value:"Extending ts-injection",id:"extending-ts-injection",children:[{value:"useInjectionContext",id:"useinjectioncontext",children:[],level:3},{value:"makeClassInjectable",id:"makeclassinjectable",children:[],level:3},{value:"InjectionContext",id:"injectioncontext",children:[{value:"Domain",id:"domain",children:[{value:"InjectableItem",id:"injectableitem",children:[],level:5},{value:"Newable",id:"newable",children:[],level:5}],level:4},{value:"Methods",id:"methods",children:[{value:"register",id:"register-1",children:[],level:5},{value:"registerWithToken",id:"registerwithtoken",children:[],level:5},{value:"doesItemExist",id:"doesitemexist",children:[],level:5},{value:"getItemByToken",id:"getitembytoken",children:[],level:5},{value:"addMetadataToItem",id:"addmetadatatoitem",children:[],level:5}],level:4},{value:"queryItemsByType",id:"queryitemsbytype",children:[],level:4}],level:3}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-reference"},"API Reference"),(0,r.kt)("h2",{id:"annotations"},"Annotations"),(0,r.kt)("h3",{id:"injectable"},"@Injectable"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Injectable")),(0,r.kt)("p",null,"Indicate to ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-injection")," that this class should be handled by the injection context.\nIt can be retrieved from the context using ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@Autowire"),"."),(0,r.kt)("h3",{id:"autowire"},"@Autowire"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Autowire(tokenOrClass: string | Newable)")),(0,r.kt)("p",null,"Inject the specified named injectable or class injectable by its reference.\nIn the case of a named injectable, provide the token name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@Autowire("TOKEN_NAME")\n')),(0,r.kt)("p",null,"In the case of a class injectable, provide a reference to the class constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"@Autowire(MyClass)\n")),(0,r.kt)("h3",{id:"env"},"@Env"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Env<VariableType>(varName: string, options?: Options)")),(0,r.kt)("p",null,"Inject the specified environment variable from process.env into the annotated class member.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"class member")," this annotation has been applied to is used to infer how\nto parse the value. Supported types are: ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,r.kt)("p",null,"You can also optionally pass a mapping function that will take in the string value and\nreturn the mapped value."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If an environment variable isn't found at runtime, by default a warning will be logged but\nthe program will continue to run. If you want to throw instead, this behaviour can be\nconfigured in the options using ",(0,r.kt)("inlineCode",{parentName:"p"},"failBehaviour"),"."))),(0,r.kt)("h5",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface Options {\n  mapper?: <VariableType>(value: string) => VariableType;\n  failBehaviour?: "THROW" | "LOG";\n}\n')),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"resolve"},"resolve"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resolve<InjectableType extends Newable>( injectable: InjectableType ): InstanceType<InjectableType>")),(0,r.kt)("p",null,"Get an instance of the provided injectable class from the injection context.\nUse this instead of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," on injectable classes.\nMust supply a reference to the injectable class's constructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"resolve<MyClass>(MyClass);\n")),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Providing a non-injectable class (not annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Injectable"),")\nwill throw an error."))),(0,r.kt)("h3",{id:"register"},"register"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"register<InjectableType>(injectable: InjectableType, token: string, type = InjectType.OBJECT): void")),(0,r.kt)("p",null,"Register any object or value with the injectable context given a specified token\n(used as reference). This injectable can then be accessed in classes with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Autowire"),"\nannotation. You can optionally specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," which can be useful when extending this framework."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'register<{ myVar: string }>({ myVar: "test" }, "MY_TOKEN");\n')),(0,r.kt)("h2",{id:"extending-ts-injection"},"Extending ts-injection"),(0,r.kt)("p",null,"Some internal APIs can be used to extend the functionality provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-injection"),".\nAn example of this is the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/burketyler/fastify-boot"},"fastify-boot")," library."),(0,r.kt)("h3",{id:"useinjectioncontext"},"useInjectionContext"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useInjectionContext(): { injectionCtx: InjectionContext }")),(0,r.kt)("p",null,"Obtain the instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectionContext")," class.\nRead more about this in ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference#injectioncontext"},"InjectionContext"),"."),(0,r.kt)("h3",{id:"makeclassinjectable"},"makeClassInjectable"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"makeClassInjectable<ClassType extends Newable>(classCtor: ClassType) : Throwable<InjectionError, InjectableItem<ClassType>>")),(0,r.kt)("p",null,"The internal API that ",(0,r.kt)("inlineCode",{parentName:"p"},"@Injectable")," invokes to instantiate the provided class and add\nthe instance to the injection context. Input must be a class constructor. The return object\nis a ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," with either an ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectionError")," on error or an ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectableItem")," on success."),(0,r.kt)("h3",{id:"injectioncontext"},"InjectionContext"),(0,r.kt)("p",null,"The class responsible for managing the injection context that ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-injection")," uses."),(0,r.kt)("h4",{id:"domain"},"Domain"),(0,r.kt)("h5",{id:"injectableitem"},"InjectableItem"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface InjectableItem<InjectableType> {\n  token: string;\n  value: InjectableType;\n}\n")),(0,r.kt)("h5",{id:"newable"},"Newable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Newable = new (...args: any[]) => any;\n")),(0,r.kt)("h4",{id:"methods"},"Methods"),(0,r.kt)("h5",{id:"register-1"},"register"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"register<InjectableType>(injectable: InjectableType): string")),(0,r.kt)("p",null,"Register an injectable class object or value into the injection context.\nReturns an auto-generated token reference to the injectable."),(0,r.kt)("h5",{id:"registerwithtoken"},"registerWithToken"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"registerWithToken<InjectableType>(injectable: InjectableType, token: string): void")),(0,r.kt)("p",null,"Register an injectable class object or value into the injection context with a specific token.\nIf the token already exists in the context, it will replace the existing item."),(0,r.kt)("h5",{id:"doesitemexist"},"doesItemExist"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"doesItemExist(token: string): boolean")),(0,r.kt)("p",null,"Check if a given injectable exists in the injectable context by its token reference."),(0,r.kt)("h5",{id:"getitembytoken"},"getItemByToken"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getItemByToken<InjectableType>(token: string): Throwable<InjectableNotFoundError, InjectableItem<InjectableType>>")),(0,r.kt)("p",null,"Retrieve an injectable by its token reference. Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," instance which will\ncontain an ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectableNotFoundError")," on error or the ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectableItem")," on success."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const getItemResult = getItemByToken<MyType>("token");\n\nif (getItemResult.isError()) {\n  // Handle error\n}\n\nreturn getItemResult.value(); // <- InjectableItem\n')),(0,r.kt)("h5",{id:"addmetadatatoitem"},"addMetadataToItem"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"addMetadataToItem(token: string, metaData: { [key: string]: unknown }): void")),(0,r.kt)("p",null,"Add the specified metaData keys to an injectable instance based on its token reference.\\\nE.g:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const token = makeClassInjectable(classCtor);\ninjectionCtx.addMetadataToItem(token, {\n  [META_TYPE]: "MY_TYPE",\n});\n')),(0,r.kt)("h4",{id:"queryitemsbytype"},"queryItemsByType"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"queryItemsByType<InjectableType>(type: string): InjectableType[]")),(0,r.kt)("p",null,"Retrieve an array of injectables that match the provided type.\\\nType is defined by the string value added to the injectable metaData key ",(0,r.kt)("a",{parentName:"p",href:"#meta_type"},"META_TYPE"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const injectables = injectionCtx.queryItemsByType("MY_TYPE");\n')))}u.isMDXComponent=!0}}]);