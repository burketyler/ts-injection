"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[491],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return b}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),b=a,y=u["".concat(s,".").concat(b)]||u[b]||d[b]||r;return n?i.createElement(y,l(l({ref:t},p),{},{components:n})):i.createElement(y,l({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1082:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={sidebar_position:3},s="API Reference",c={unversionedId:"api-reference",id:"api-reference",title:"API Reference",description:"Decorators",source:"@site/docs/api-reference.md",sourceDirName:".",slug:"/api-reference",permalink:"/docs/api-reference",editUrl:"https://github.com/burketyler/ts-injection/docs/api-reference.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Usage",permalink:"/docs/usage"},next:{title:"Caveats",permalink:"/docs/caveats"}},p=[{value:"Decorators",id:"decorators",children:[{value:"@Injectable",id:"injectable",children:[],level:3},{value:"@Autowire(tokenOrClass: string | Newable)",id:"autowiretokenorclass-string--newable",children:[],level:3},{value:"@Env&lt;ClassType&gt;(varName: string, options?: Options)",id:"envclasstypevarname-string-options-options",children:[{value:"Options",id:"options",children:[],level:5}],level:3}],level:2},{value:"Functions",id:"functions",children:[{value:"resolve&lt;ClassType&gt;(injectable: Newable): ClassType",id:"resolveclasstypeinjectable-newable-classtype",children:[],level:3},{value:"register&lt;ClassType&gt;(injectable: ClassType, token: string, type: string = &quot;OBJECT&quot;): void",id:"registerclasstypeinjectable-classtype-token-string-type-string--object-void",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"useInjectionContext(): { injectionCtx: InjectionContext }",id:"useinjectioncontext--injectionctx-injectioncontext-",children:[],level:3},{value:"makeClassInjectable&lt;ClassType extends Newable&gt;(classCtor: ClassType) : string | undefined",id:"makeclassinjectableclasstype-extends-newableclassctor-classtype--string--undefined",children:[],level:3},{value:"injectIntoClass(classCtor: any, member: string, injectable: any): void",id:"injectintoclassclassctor-any-member-string-injectable-any-void",children:[],level:3}],level:2},{value:"Classes",id:"classes",children:[{value:"InjectionContext",id:"injectioncontext",children:[{value:"Domain",id:"domain",children:[{value:"InjectableItemModel",id:"injectableitemmodel",children:[],level:5}],level:4},{value:"Methods",id:"methods-1",children:[{value:"register&lt;InjectableType&gt;(injectable: InjectableType): string",id:"registerinjectabletypeinjectable-injectabletype-string",children:[],level:5},{value:"registerWithToken&lt;InjectableType&gt;(injectable: InjectableType, token: string): void",id:"registerwithtokeninjectabletypeinjectable-injectabletype-token-string-void",children:[],level:5},{value:"doesItemExist(token: string): boolean",id:"doesitemexisttoken-string-boolean",children:[],level:5},{value:"getItemByToken&lt;InjectableType&gt;(token: string): Throwable&lt;InjectableNotFoundError, InjectableItem&lt;InjectableType&gt;&gt;",id:"getitembytokeninjectabletypetoken-string-throwableinjectablenotfounderror-injectableiteminjectabletype",children:[],level:5},{value:"addMetadataToItem(token: string, metaData: { key: string: unknown }): void",id:"addmetadatatoitemtoken-string-metadata--key-string-unknown--void",children:[],level:5}],level:4},{value:"queryItemsByType&lt;InjectableType&gt;(type: string): InjectableType[]",id:"queryitemsbytypeinjectabletypetype-string-injectabletype",children:[],level:4}],level:3}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-reference"},"API Reference"),(0,r.kt)("h2",{id:"decorators"},"Decorators"),(0,r.kt)("h3",{id:"injectable"},"@Injectable"),(0,r.kt)("p",null,"Indicate to ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-injection")," that this class should be handled by the injection context.\nIt can be retrieved from the context using ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@Autowire"),"."),(0,r.kt)("h3",{id:"autowiretokenorclass-string--newable"},"@Autowire(tokenOrClass: string | Newable)"),(0,r.kt)("p",null,"Inject the specified named injectable or class injectable by its reference.\nIn the case of a named injectable, provide the token name:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'@Autowire("TOKEN_NAME")')),(0,r.kt)("p",null,"In the case of a class injectable, provide a reference to the class constructor:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Autowire(MyClass)")),(0,r.kt)("h3",{id:"envclasstypevarname-string-options-options"},"@Env<ClassType",">","(varName: string, options?: Options)"),(0,r.kt)("p",null,"Inject the specified environment variable from process.env into the annotated class member.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"class member")," this annotation has been applied to is used to infer how\nto parse the value. Supported types are: ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,r.kt)("p",null,"You can also optionally pass a mapping function that will take in the string value and\nreturn the mapped value."),(0,r.kt)("p",null,"If an environment variable isn't found at runtime, by default a warning will be logged but\nthe program will continue to run. If you want to throw instead, this behaviour can be\nconfigured in the options using ",(0,r.kt)("inlineCode",{parentName:"p"},"failBehaviour"),"."),(0,r.kt)("h5",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'export interface Options {\n  mapper?: <VariableType>(value: string) => VariableType;\n  failBehaviour?: "THROW" | "LOG";\n}\n')),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"resolveclasstypeinjectable-newable-classtype"},"resolve<ClassType",">","(injectable: Newable): ClassType"),(0,r.kt)("p",null,"Get an instance of the provided injectable class from the injection context.\nUse this instead of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," on injectable classes.\nMust supply a reference to the injectable class's constructor:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resolve<MyClass>(MyClass);")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": providing a non-injectable class (not annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@Injectable"),")\nwill throw an error."),(0,r.kt)("h3",{id:"registerclasstypeinjectable-classtype-token-string-type-string--object-void"},"register<ClassType",">",'(injectable: ClassType, token: string, type: string = "OBJECT"): void'),(0,r.kt)("p",null,"Register any object or value into the injectable context with a specified token or 'name'.\nThis injectable can then be accessed in classes with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Autowire")," annotation.\nYou can optionally specify a 'type' which can be useful when extending this framework."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'register<{myVar: string}>({myVar: "test"}, "MY_TOKEN");')),(0,r.kt)("h1",{id:"extending-ts-injection"},"Extending ts-injection"),(0,r.kt)("p",null,"Some internal APIs can be used  to extend the functionality provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-injection"),".\nAn example of this is the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/burketyler/fastify-boot"},"fastify-boot")," library."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"useinjectioncontext--injectionctx-injectioncontext-"},"useInjectionContext(): { injectionCtx: InjectionContext }"),(0,r.kt)("p",null,"Obtain the instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectionContext")," class.\nRead more about this in ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference#injectioncontext"},"InjectionContext"),"."),(0,r.kt)("h3",{id:"makeclassinjectableclasstype-extends-newableclassctor-classtype--string--undefined"},"makeClassInjectable<ClassType extends Newable",">","(classCtor: ClassType) : string | undefined"),(0,r.kt)("p",null,"The internal API that ",(0,r.kt)("inlineCode",{parentName:"p"},"@Injectable")," invokes to instantiate the provided class and add\nthe instance to the injection context. Input must be a class constructor. The return value\nis the token reference to the injectable, or undefined\nif it detects the classCtor is actually for a primitive type."),(0,r.kt)("h3",{id:"injectintoclassclassctor-any-member-string-injectable-any-void"},"injectIntoClass(classCtor: any, member: string, injectable: any): void"),(0,r.kt)("p",null,"A simple helper method that will inject the provided instance or value (injectable) into the class (classOrClassCtor) member/field (member)."),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("h3",{id:"injectioncontext"},"InjectionContext"),(0,r.kt)("p",null,"The class responsible for managing the injection context that ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-injection")," uses."),(0,r.kt)("h4",{id:"domain"},"Domain"),(0,r.kt)("h5",{id:"injectableitemmodel"},"InjectableItemModel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface InjectableItemModel<ClassType> {\n  token: string;\n  value: ClassType;\n}\n")),(0,r.kt)("h4",{id:"methods-1"},"Methods"),(0,r.kt)("h5",{id:"registerinjectabletypeinjectable-injectabletype-string"},"register<InjectableType",">","(injectable: InjectableType): string"),(0,r.kt)("p",null,"Register an injectable class object or value into the injection context.\nReturns an auto-generated token reference to the injectable."),(0,r.kt)("h5",{id:"registerwithtokeninjectabletypeinjectable-injectabletype-token-string-void"},"registerWithToken<InjectableType",">","(injectable: InjectableType, token: string): void"),(0,r.kt)("p",null,"Register an injectable class object or value into the injection context with a specific token.\nIf the token already exists in the context, it will replace the existing item."),(0,r.kt)("h5",{id:"doesitemexisttoken-string-boolean"},"doesItemExist(token: string): boolean"),(0,r.kt)("p",null,"Check if a given injectable exists in the injectable context by its token reference."),(0,r.kt)("h5",{id:"getitembytokeninjectabletypetoken-string-throwableinjectablenotfounderror-injectableiteminjectabletype"},"getItemByToken<InjectableType",">","(token: string): Throwable\\<InjectableNotFoundError, InjectableItem\\<InjectableType",">",">"),(0,r.kt)("p",null,"Retrieve an injectable by its token reference. Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Throwable")," instance which will\neither contain an error or the ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectableItem"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const getItemResult = getItemByToken<MyType>("token");\n\nif (getItemResult.isError()) {\n  // Handle error\n}\n\nreturn getItemResult.value(); // <- InjectableItem\n')),(0,r.kt)("h5",{id:"addmetadatatoitemtoken-string-metadata--key-string-unknown--void"},"addMetadataToItem(token: string, metaData: { ","[key: string]",": unknown }): void"),(0,r.kt)("p",null,"Add the specified metaData keys to an injectable instance based on its token reference.\\\nE.g:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'  const token = makeClassInjectable(classCtor);\n  injectionCtx.addMetadataToItem(token, {\n    [META_TYPE]: "MY_TYPE",\n  });\n')),(0,r.kt)("h4",{id:"queryitemsbytypeinjectabletypetype-string-injectabletype"},"queryItemsByType<InjectableType",">","(type: string): InjectableType[]"),(0,r.kt)("p",null,"Retrieve an array of injectables that match the provided type.\\\nType is defined by the string value added to the injectable's metaData key ",(0,r.kt)("a",{parentName:"p",href:"#meta_type"},"META_TYPE"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'  const injectables = injectionCtx.queryItemsByType("MY_TYPE");\n')))}u.isMDXComponent=!0}}]);